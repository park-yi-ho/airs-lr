{"ast":null,"code":"var _jsxFileName = \"/home/yiho/airs-recom/src/component/PhoneInfo.js\";\nimport React, { Component } from 'react';\n\nclass PhoneInfo extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // 우리는 수정 버튼을 눌렀을 떄 editing 값을 true 로 설정해줄것입니다.\n      // 이 값이 true 일 때에는, 기존에 텍스트 형태로 보여주던 값들을\n      // input 형태로 보여주게 됩니다.\n      editing: false,\n      // input 의 값은 유동적이겠지요? input 값을 담기 위해서 각 필드를 위한 값도\n      // 설정합니다\n      name: '',\n      phone: ''\n    };\n\n    this.handleRemove = () => {\n      // 삭제 버튼이 클릭되면 onRemove 에 id 넣어서 호출\n      const {\n        info,\n        onRemove\n      } = this.props;\n      onRemove(info.id);\n    };\n\n    this.handleToggleEdit = () => {\n      const {\n        editing\n      } = this.state;\n      this.setState({\n        editing: !editing\n      });\n    };\n\n    this.handleChange = e => {\n      const {\n        name,\n        value\n      } = e.target;\n      this.setState({\n        [name]: value\n      });\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // 여기서는, editing 값이 바뀔 때 처리 할 로직이 적혀있습니다.\n    // 수정을 눌렀을땐, 기존의 값이 input에 나타나고,\n    // 수정을 적용할땐, input 의 값들을 부모한테 전달해줍니다.\n    const {\n      info,\n      onUpdate\n    } = this.props;\n\n    if (!prevState.editing && this.state.editing) {\n      // editing 값이 false -> true 로 전환 될 때\n      // info 의 값을 state 에 넣어준다\n      this.setState({\n        name: info.name,\n        phone: info.phone\n      });\n    }\n\n    if (prevState.editing && !this.state.editing) {\n      // editing 값이 true -> false 로 전환 될 때\n      onUpdate(info.id, {\n        name: this.state.name,\n        phone: this.state.phone\n      });\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // 수정 상태가 아니고, info 값이 같다면 리렌더링 안함\n    if (!this.state.editing && !nextState.editing && nextProps.info === this.props.info) {\n      return false;\n    } // 나머지 경우엔 리렌더링함\n\n\n    return true;\n  }\n\n  render() {\n    console.log('render PhoneInfo ' + this.props.info.id);\n    const style = {\n      border: '1px solid black',\n      padding: '8px',\n      margin: '8px'\n    };\n    const {\n      editing\n    } = this.state;\n\n    if (editing) {\n      // 수정모드\n      return React.createElement(\"div\", {\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        value: this.state.name,\n        name: \"name\",\n        placeholder: \"\\uC774\\uB984\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        value: this.state.phone,\n        name: \"phone\",\n        placeholder: \"\\uC804\\uD654\\uBC88\\uD638\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        onClick: this.handleToggleEdit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"\\uC801\\uC6A9\"), React.createElement(\"button\", {\n        onClick: this.handleRemove,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"\\uC0AD\\uC81C\"));\n    } // 일반모드\n\n\n    const {\n      name,\n      phone\n    } = this.props.info;\n    return React.createElement(\"div\", {\n      style: style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, name)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, phone), React.createElement(\"button\", {\n      onClick: this.handleToggleEdit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"\\uC218\\uC815\"), React.createElement(\"button\", {\n      onClick: this.handleRemove,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"\\uC0AD\\uC81C\"));\n  }\n\n}\n\nPhoneInfo.defaultProps = {\n  info: {\n    name: '이름',\n    phone: '010-0000-0000',\n    id: 0\n  }\n};\nexport default PhoneInfo;","map":{"version":3,"sources":["/home/yiho/airs-recom/src/component/PhoneInfo.js"],"names":["React","Component","PhoneInfo","state","editing","name","phone","handleRemove","info","onRemove","props","id","handleToggleEdit","setState","handleChange","e","value","target","componentDidUpdate","prevProps","prevState","onUpdate","shouldComponentUpdate","nextProps","nextState","render","console","log","style","border","padding","margin","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nclass PhoneInfo extends Component {\n    static defaultProps = {\n        info: {\n            name: '이름',\n            phone: '010-0000-0000',\n            id: 0\n        },\n    }\n\n    state = {\n        // 우리는 수정 버튼을 눌렀을 떄 editing 값을 true 로 설정해줄것입니다.\n        // 이 값이 true 일 때에는, 기존에 텍스트 형태로 보여주던 값들을\n        // input 형태로 보여주게 됩니다.\n        editing: false,\n        // input 의 값은 유동적이겠지요? input 값을 담기 위해서 각 필드를 위한 값도\n        // 설정합니다\n        name: '',\n        phone: '',\n    }\n\n    handleRemove = () => {\n        // 삭제 버튼이 클릭되면 onRemove 에 id 넣어서 호출\n        const { info, onRemove } = this.props;\n        onRemove(info.id);\n    }\n\n    // editing 값을 반전시키는 함수입니다\n    // true -> false, false -> true\n    handleToggleEdit = () => {\n        const { editing } = this.state;\n        this.setState({ editing: !editing });\n    }\n\n    // input 에서 onChange 이벤트가 발생 될 때\n    // 호출되는 함수입니다\n    handleChange = (e) => {\n        const { name, value } = e.target;\n        this.setState({\n            [name]: value\n        });\n    }\n\n\n    componentDidUpdate(prevProps, prevState) {\n        // 여기서는, editing 값이 바뀔 때 처리 할 로직이 적혀있습니다.\n        // 수정을 눌렀을땐, 기존의 값이 input에 나타나고,\n        // 수정을 적용할땐, input 의 값들을 부모한테 전달해줍니다.\n\n        const { info, onUpdate } = this.props;\n        if (!prevState.editing && this.state.editing) {\n            // editing 값이 false -> true 로 전환 될 때\n            // info 의 값을 state 에 넣어준다\n            this.setState({\n                name: info.name,\n                phone: info.phone\n            })\n        }\n\n        if (prevState.editing && !this.state.editing) {\n            // editing 값이 true -> false 로 전환 될 때\n            onUpdate(info.id, {\n                name: this.state.name,\n                phone: this.state.phone\n            });\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        // 수정 상태가 아니고, info 값이 같다면 리렌더링 안함\n        if (!this.state.editing\n            && !nextState.editing\n            && nextProps.info === this.props.info) {\n            return false;\n        }\n        // 나머지 경우엔 리렌더링함\n        return true;\n    }\n\n\n    render() {\n        console.log('render PhoneInfo ' + this.props.info.id);\n        const style = {\n            border: '1px solid black',\n            padding: '8px',\n            margin: '8px'\n        };\n\n        const { editing } = this.state;\n\n\n        if (editing) { // 수정모드\n            return (\n                <div style={style}>\n                    <div>\n                        <input\n                            value={this.state.name}\n                            name=\"name\"\n                            placeholder=\"이름\"\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <div>\n                        <input\n                            value={this.state.phone}\n                            name=\"phone\"\n                            placeholder=\"전화번호\"\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <button onClick={this.handleToggleEdit}>적용</button>\n                    <button onClick={this.handleRemove}>삭제</button>\n                </div>\n            );\n        }\n\n\n        // 일반모드\n        const {\n            name, phone\n        } = this.props.info;\n\n        return (\n            <div style={style}>\n                <div><b>{name}</b></div>\n                <div>{phone}</div>\n                <button onClick={this.handleToggleEdit}>수정</button>\n                <button onClick={this.handleRemove}>삭제</button>\n            </div>\n        );\n    }\n}\n\nexport default PhoneInfo;"]},"metadata":{},"sourceType":"module"}